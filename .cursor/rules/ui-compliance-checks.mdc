---
description:
globs:
alwaysApply: false
---
# UI规范检查系统详解

## 检查系统架构
UI规范检查功能位于 [code.ts](mdc:code.ts) 的 `checkUIRules()` 函数中，采用递归分析模式遍历设计稿节点树。

## 当前激活的检查规则

### 1. 自动布局智能检查
**检查目标**：包含多个交互元素的复杂容器
**检查条件**：
- 节点类型为 FRAME 或 COMPONENT
- 子节点数量 ≥ 3
- 包含 ≥ 2 种不同类型的子节点
- 未启用自动布局 (`layoutMode === "NONE"`)

**实现逻辑**：
```typescript
// 自动布局检查 - 只检查复杂容器
if ((node.type === "FRAME" || node.type === "COMPONENT") && 
    node.children && node.children.length >= 3) {
  const childTypes = new Set(node.children.map(child => child.type));
  if (childTypes.size >= 2 && node.layoutMode === "NONE") {
    // 报告缺少自动布局
  }
}
```

### 2. 分层规范检查
**检查目标**：识别 Group 的误用情况
**检查逻辑**：建议将 Group 替换为 Frame 以获得更好的布局控制

### 3. 命名规范检查
**检查目标**：重要的布局容器节点
**触发条件**：
- 子元素数量 ≥ 4
- 容器尺寸 ≥ 200×150
- 包含 ≥ 3 种不同类型的元素
- 使用默认命名模式（如 "Frame 1", "Group 2" 等）

**智能排除**：
- 简单的"图标+文本"组合
- 小尺寸装饰性元素

### 4. 根Frame分组结构检查
**检查场景**：
- 根Frame下直接子元素过多且没有合理分组
- 根Frame下全为原子元素（RECTANGLE, TEXT, ELLIPSE 等）

**建议**：对复杂内容进行模块化分组

### 5. 子节点数量检查
**阈值**：> 20个直接子节点
**目的**：避免单个容器过于复杂，提高可维护性

### 6. 层级深度检查
**阈值**：> 5层嵌套
**实现**：通过递归分析时传递 `depth` 参数进行检测

### 7. 素材型节点命名检查
**检查逻辑**：
- 识别包含大量矢量元素的节点（>5个且80%以上为VECTOR等类型）
- 要求最远公共祖先节点命名包含识别标识
- 识别标识："icon", "素材", "decoration", "vector", "图形"

### 8. 全面自动布局检查（新增功能）
**检查目标**：所有支持自动布局的节点
**支持的节点类型**：FRAME、COMPONENT、INSTANCE
**检查逻辑**：
- 递归遍历选中节点下的所有子节点
- 检查每个支持自动布局的节点是否已启用自动布局
- 提供完整的节点路径信息，便于定位问题
- 支持独立触发，不影响其他检查规则

**实现特点**：
```typescript
// 支持自动布局的节点类型（根据 Figma 官方文档）
const AUTO_LAYOUT_CAPABLE_TYPES = ['FRAME', 'COMPONENT', 'INSTANCE'];

// 递归检查逻辑
function recursiveCheck(currentNode: SceneNode, path: string[] = []): void {
  // 检查当前节点是否支持自动布局且有子节点
  // 如果未启用自动布局，记录违规并提供路径信息
}
```

## 已禁用的检查规则

### 颜色变量检测（已禁用）
**原因**：很多团队不使用 Figma Variables 功能

### 文本样式检测（已禁用）
**原因**：历史项目兼容性问题

### 间距规范检测（已禁用）
**原因**：菜单、导航栏等组件的紧密排列是正常设计模式

## 误报控制策略

### 1. 提高检查阈值
- 从严格阈值逐步放宽到实用阈值
- 例如：命名检查从3+子元素提升到4+子元素

### 2. 智能排除逻辑
- 识别并排除常见的正常设计模式
- 避免对装饰性、功能性元素的过度检查

### 3. 上下文感知
- 考虑节点在整体设计中的作用
- 区分容器节点和内容节点的检查标准

## 错误报告格式

### 单个错误结构
```typescript
{
  type: string,        // 错误类型
  message: string,     // 错误描述
  suggestion: string,  // 修正建议
  nodeId: string,      // 节点ID（用于定位）
  nodeName: string     // 节点名称
}
```

### 批量错误报告
- 按错误类型分组统计
- 生成 Markdown 格式报告
- 支持一键复制所有错误

## 扩展新检查规则的最佳实践

1. **智能阈值设计**：避免硬编码，使用合理的数值阈值
2. **排除逻辑**：预先考虑正常设计模式，避免误报
3. **性能考虑**：复杂检查应有性能优化措施
4. **用户友好**：提供清晰的错误描述和可操作的建议
 